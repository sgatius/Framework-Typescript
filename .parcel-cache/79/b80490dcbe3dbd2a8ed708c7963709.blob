var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "View", function () {
  return View;
});
class View {
  regions = {};
  constructor(parent, model) {
    this.parent = parent;
    this.model = model;
    this.bindModel();
  }
  regionsMap() {
    return {};
  }
  eventsMap() {
    return {};
  }
  bindModel() {
    this.model.on("change", () => {
      this.render();
    });
  }
  bindEvents(fragment) {
    const eventsMap = this.eventsMap();
    for (let eventKey in eventsMap) {
      const [eventName, selector] = eventKey.split(":");
      fragment.querySelectorAll(selector).forEach(element => {
        element.addEventListener(eventName, eventsMap[eventKey]);
      });
    }
  }
  mapRegions(fragment) {
    const regionsMap = this.regionsMap();
    for (let key in regionsMap) {
      const selector = regionsMap[key];
      this.regions[key] = fragment.querySelector(selector);
    }
  }
  onRender() {}
  render() {
    this.parent.innerHTML = "";
    const templateElement = document.createElement("template");
    templateElement.innerHTML = this.template();
    this.bindEvents(templateElement.content);
    this.mapRegions(templateElement.content);
    this.onRender();
    this.parent.append(templateElement.content);
  }
}
